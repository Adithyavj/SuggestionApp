@page "/Profile"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager

<h1 class="page-heading text-uppercase mb-2">My Profile</h1>
<div class="row">
    <div class="col-12 close-button-section">
        <button class="btn btn-close" @onclick="ClosePage"></button>
    </div>
</div>
@*Top Section*@
<div class="form-layout mb-3">
    <h2 class="my-submission-heading">My Account</h2>
    <p class="my-submission-text">
        <a href="MicrosoftIdentity/Account/EditProfile">
            Edit My Profile
        </a>
    </p>
</div>

@if (approved?.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">Approved Suggestions</h2>
        <p class="my-submission-text">These are your suggestions that are currently active.</p>
    
        @foreach (var s in approved)
        {
            <hr class="my-submission-seperator" />
            <div class="fw-bold suggestion-detail-suggestion">
                @s.Suggestion
            </div>
            <p class="my-submission-text">
                @s.DateCreated.ToString("MM/dd/yyyy")
            </p>
            <p class="my-submission-text">
                Total Vote: @s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>
            @if (s.SuggestionStatus is not null)
            {
                <div class="fw-bold suggestion-detail-suggestion">@s.SuggestionStatus.StatusName</div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}

@if (archived?.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">Archived Suggestions</h2>
        <p class="my-submission-text">These are your suggestions that were active but did not gain enough traction.</p>
    
        @foreach (var s in archived)
        {
            <hr class="my-submission-seperator" />
            <div class="fw-bold suggestion-detail-suggestion">
                @s.Suggestion
            </div>
            <p class="my-submission-text">
                @s.DateCreated.ToString("MM/dd/yyyy")
            </p>
            <p class="my-submission-text">
                Total Vote: @s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>
            @if (s.SuggestionStatus is not null)
            {
                <div class="fw-bold suggestion-detail-suggestion">@s.SuggestionStatus.StatusName</div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}

@if (pending?.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">Pending Suggestions</h2>
        <p class="my-submission-text">These are your suggestions that have not yet been reviewed by the administrator.</p>
    
        @foreach (var s in pending)
        {
            <hr class="my-submission-seperator" />
            <div class="fw-bold suggestion-detail-suggestion">
                @s.Suggestion
            </div>
            <p class="my-submission-text">
                @s.DateCreated.ToString("MM/dd/yyyy")
            </p>
            <p class="my-submission-text">
                Total Vote: @s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>
            @if (s.SuggestionStatus is not null)
            {
                <div class="fw-bold suggestion-detail-suggestion">@s.SuggestionStatus.StatusName</div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}

@if (rejected?.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">Rejected Suggestions</h2>
        <p class="my-submission-text">These are your suggestions that were not deemed to be appropriate for the training suggestion site.</p>
    
        @foreach (var s in rejected)
        {
            <hr class="my-submission-seperator" />
            <div class="fw-bold suggestion-detail-suggestion">
                @s.Suggestion
            </div>
            <p class="my-submission-text">
                @s.DateCreated.ToString("MM/dd/yyyy")
            </p>
            <p class="my-submission-text">
                Total Vote: @s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>
            @if (s.SuggestionStatus is not null)
            {
                <div class="fw-bold suggestion-detail-suggestion">@s.SuggestionStatus.StatusName</div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}

@code {
    private UserModel loggedInUser;
    // Create seperate lists for each type of suggestion
    private List<SuggestionModel> submissions;
    private List<SuggestionModel> approved;
    private List<SuggestionModel> archived;
    private List<SuggestionModel> pending;
    private List<SuggestionModel> rejected;

    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);

        var results = await suggestionData.GetUsersSuggestions(loggedInUser.Id);

        if (loggedInUser is not null && results is not null)
        {
            submissions = results.OrderByDescending(s => s.DateCreated).ToList();
            approved = submissions.Where(s => s.ApprovedForRelease && s.Archived == false && s.Rejected == false).ToList();
            archived = submissions.Where(s => s.Archived && s.Rejected == false).ToList();
            pending = submissions.Where(s => s.ApprovedForRelease == false && s.Rejected == false).ToList();
            rejected = submissions.Where(s => s.Rejected).ToList();
        }
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

}
